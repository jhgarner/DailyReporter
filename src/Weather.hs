{-# LANGUAGE OverloadedStrings, DeriveGeneric #-}

module Weather
  ( weatherHTML
  , DailyData
  ) where

import Data.Aeson
import qualified Data.ByteString.Lazy as B
import Network.HTTP.Conduit (simpleHttp)
import Data.Text
import GHC.Generics
import Data.Time.Clock.POSIX
import Data.Time.Format
import Data.Maybe

-- Defining several dataypes based on the Json files format
-- |The top level object in the json.
data Weather =
  Weather { daily :: Daily 
          , currently :: Currently
          } deriving (Show,Generic)
instance FromJSON Weather

-- |The current conditions object in the json.
data Currently =
  Currently { cSummary :: String 
            , apparentTemperature :: Float
            } deriving (Show,Generic)
instance FromJSON Currently where
  -- The strange syntax below confused me initially, but .: is just defined by Aeson.
  parseJSON = withObject "Currently" $ \v -> Currently
        <$> v .: "summary"
        <*> v .: "apparentTemperature"

-- |The Daily object in the top level. This contains an array of fields called "data" for each day
data Daily =
  Daily { theData :: [DailyData] 
        , summary :: String
        } deriving (Show)
instance FromJSON Daily where
  parseJSON = withObject "Daily" $ \v -> Daily
        <$> v .: "data"
        <*> v .: "summary"

-- |The data object in Daily.
data DailyData = 
  DailyData { temperatureHigh :: Float
            , temperatureHighTime :: Integer
            , temperatureLow :: Float
            , temperatureLowTime :: Integer
            , precipProbability :: Float
            , aSummary :: String
            , precipIntensity :: Float
            , precipIntensityMax :: Float
            , precipIntensityMaxTime :: Maybe Float
            } deriving (Show,Generic)
instance FromJSON DailyData where
  parseJSON = withObject "DailyData" $ \v -> DailyData
        <$> v .: "temperatureHigh"
        <*> v .: "temperatureHighTime"
        <*> v .: "temperatureLow"
        <*> v .: "temperatureLowTime"
        <*> v .: "precipProbability"
        <*> v .: "summary"
        <*> v .: "precipIntensity"
        <*> v .: "precipIntensityMax"
        <*> v .:? "precipIntensityMaxTime"

-- |The final html text generated by weather
weatherHTML :: IO String
weatherHTML = do
  weather <- parseWeather
  case weather of
    Right a -> do
      let (Currently sum st) = currently a
      let (Daily wData daySum) = daily a
      let (DailyData th tht tl tlt pp dSum pi pim pimtM) = Prelude.head wData
      let thtRead = formatTime defaultTimeLocale "%H:%M" $ posixSecondsToUTCTime (realToFrac tht)
      let tltRead = formatTime defaultTimeLocale "%H:%M" $ posixSecondsToUTCTime (realToFrac tlt)
      -- There should be a better way to do these next few lines
      let pimt = extractMaybe pimtM
      let pimtRead = if pimt /= -1
          then formatTime defaultTimeLocale "%H:%M" $ posixSecondsToUTCTime (realToFrac pimt)
          else "NA"

      return $ "<div align = \"center\">\n"
        ++ "<h3>Weather Report:</h3>"
        ++ "Summary: <b>" ++ dSum ++ "</b> <br>"
        ++ "Max Apparent Temperature: <b>" ++ show th ++ "</b> at " ++ thtRead ++ "<br>"
        ++ "Min Apparent Temperature: <b>" ++ show tl ++ "</b> at " ++ tltRead ++ " <br>"
        ++ "Precipitation Intensity: <b>" ++ show pi ++ "</b> inches per hour. <br>"
        ++ "Max Intensity: <b>" ++ show pim ++ "</b> at " ++ pimtRead ++ "<br>"
        ++ "Probability of Precipitation: <b>" ++ show pp ++ "</b> <br>"
        ++ "Currently: <b>" ++ show sum ++ "</b> <br>"
        ++ "Current Temperature: <b>" ++ show st ++ "</b> <br> <br>"
        ++ "Rest of the week: " ++ daySum
        ++ "</div>"
    Left err -> return err

-- |Little helper function that probably means I am doing things wrong
extractMaybe :: Maybe Float -> Float
extractMaybe (Just a) = a
extractMaybe Nothing = -1

-- |Attempts to turn json into haskell data
parseWeather :: IO (Either String Weather)
parseWeather = (eitherDecode <$> response) :: IO (Either String Weather)

-- |Grabs the json from the url
response :: IO B.ByteString
response = simpleHttp request

-- |The url for the json
request :: String
request = "https://api.forecast.io/forecast/" ++ apiKey ++ path
  where path = "/" ++ fst location ++ "," ++ snd location

apiKey :: String
apiKey = "abb2504f8579fc04baf9708889b4c795"

location :: (String, String)
location = ("38.933771", "-104.850764")

