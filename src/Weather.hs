{-# LANGUAGE OverloadedStrings #-}

module Weather
  ( weather
  ) where

import Control.Lens
import Data.Aeson
import Data.Aeson.Lens

import Data.Maybe

import Data.Text
import Data.Text.IO

import Data.Time.Clock.POSIX
import Data.Time.Format
import Data.Time.LocalTime

import Utils

-- |Configuration for weather information (location and apikey)
data WeatherConfig = Config {
    apikey :: String,
    loc :: (String, String)
} deriving (Read, Show)

-- |The final html text generated by weather.
weather :: IO Text
weather = do
  config <- readConfig "WeatherConfig"
  w <- response config
  h <- htmlS
  return . fromMaybe "Error getting weather" $ do
    currently <- getKey w ["currently", "summary"]
    currentTemp <- getKey w ["currently", "apparentTemperature"]
    summary <- getKey w ["daily", "summary"]
    dayData <- w ^? key "daily" . key "data" . nth 0
    tempHigh <- getKey dayData ["temperatureHigh"]
    let tht = getTime $ getKey dayData ["temperatureHighTime"]
    tempLow <- getKey dayData ["temperatureLow"]
    let tlt = getTime $ getKey dayData ["temperatureLowTime"]
    precipProb <- getKey dayData ["precipProbability"]
    precipInt <- getKey dayData ["precipIntensity"]
    precipIntMax <- getKey dayData ["precipIntensityMax"]
    let pimt = getTime $ getKey dayData ["precipIntensityMaxTime"]
    nowSummary <- getKey dayData ["summary"]
    Just (template
        [ ("*summary", summary)
        , ("*tempHigh", tempHigh)
        , ("*tht", tht)
        , ("*tempLow", tempLow)
        , ("*tlt", tlt)
        , ("*precipInt", precipInt)
        , ("*precipIntMax", precipIntMax)
        , ("*pimt", pimt)
        , ("*precipProb", precipProb)
        , ("*currently", currently)
        , ("*currentTemp", currentTemp)
        , ("*nowSummary", nowSummary)
        ] h)


-- |Templating (uses simple *) for weather email section.
-- (templates/Weather.html)
htmlS :: IO Text
htmlS = Data.Text.IO.readFile "templates/Weather.html"

-- |Grabs the json from the url for darksky api. Uses weather configuration.
response :: WeatherConfig -> IO Text
response config = do
    r <- request config
    getHttp r

-- |Creates url for json request from darksky. Uses weather configuration.
request :: WeatherConfig -> IO String
request config = do
    return $ "https://api.darksky.net/forecast/" ++ api ++ path
    where
        api = apikey config
        location = loc config
        path = "/" ++ fst location ++ "," ++ snd location

-- |Utility function for getting value from json.
getKey :: (AsValue j) => j -> [Text] -> Maybe Text
getKey _ [] = Nothing
getKey json_response (p:ps) =
    case json_response ^?
         Prelude.foldl (\acc a -> acc . key a) (key p) ps of
        Nothing -> Nothing
        Just (String s) -> Just s
        Just (Number n) -> Just $ pack . show $ n
        _ -> Just $ Data.Text.concat [pack "Error getting ", p]

-- |Hardcoded TimeZone
currentZone :: TimeZone
currentZone = hoursToTimeZone (-6)

-- |Used to get time from darksky api. Solely for this.
getTime :: Maybe Text -> Text
getTime =
    maybe "None" (pack .
                  formatTime defaultTimeLocale "%H:%M" .
                  utcToZonedTime currentZone .
                  posixSecondsToUTCTime .
                  realToFrac .
                  (read :: String -> Double)
                  . unpack)
