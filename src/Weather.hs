{-# LANGUAGE OverloadedStrings #-}

module Weather
  ( weatherHTML
  ) where

import Data.Aeson
import Data.Aeson.Lens
import qualified Data.ByteString.Lazy as B
import Network.HTTP.Conduit (simpleHttp)
import Data.Text
import Data.Time.Clock.POSIX
import Data.Time.Format
import Data.Maybe
import Control.Lens

-- |The final html text generated by weather
weatherHTML :: IO String
weatherHTML = do
  weather <- response
  let (Just (String currently)) = weather ^? key "currently" . key "summary"
  let (Just (Number currentTemp)) = weather ^? key "currently" . key "apparentTemperature"

  let (Just (String summary)) = weather ^? key "daily" . key "summary"
  let (Just dayData) = weather ^? key "daily" . key "data" . nth 0
  let (Just (Number tempHigh)) = dayData ^? key "temperatureHigh"
  let (Just (Number tempHighTime)) = dayData ^? key "temperatureHighTime"
  let (Just (Number tempLow)) = dayData ^? key "temperatureLow"
  let (Just (Number tempLowTime)) = dayData ^? key "temperatureLowTime"
  let (Just (Number precipProb)) = dayData ^? key "precipProbability"
  let (Just (Number precipInt)) = dayData ^? key "precipIntensity"
  let (Just (Number precipIntMax)) = dayData ^? key "precipIntensityMax"
  let (Just (Number precipIntMaxTime)) = dayData ^? key "precipIntensityMaxTime"
  let (Just (String nowSummary)) = dayData ^? key "summary"

  let tht = formatTime defaultTimeLocale "%H:%M" 
            $ posixSecondsToUTCTime (realToFrac tempHighTime)
  let tlt = formatTime defaultTimeLocale "%H:%M" 
            $ posixSecondsToUTCTime (realToFrac tempLowTime)
  let pimt = formatTime defaultTimeLocale "%H:%M" 
             $ posixSecondsToUTCTime (realToFrac precipIntMaxTime)

  return $ "<meta charset=\"utf-8\"/><div align = \"center\">\n<h3>Weather Report:</h3>Summary: <b>"
    ++ unpack summary ++ "</b> <br>Max Apparent Temperature: <b>" ++ show tempHigh 
    ++ "</b> at " ++ tht ++ "<br>Min Apparent Temperature: <b>" ++ show tempLow 
    ++ "</b> at " ++ tlt ++ "<br>Precipitation Intensity: <b>" ++ show precipInt 
    ++ "</b> inches per hour. <br>Max Intensity: <b>" ++ show precipIntMax
    ++ "</b> at " ++ pimt ++ "<br>Probability of Precipitation: <b>" 
    ++ show precipProb ++ "</b> <br>Currently: <b>" ++ unpack currently 
    ++ "</b> <br>Current Temperature: <b>" ++ show currentTemp 
    ++ "</b><br><br>Rest of the week: " ++ unpack nowSummary ++ "</div>"

-- |Grabs the json from the url
response :: IO B.ByteString
response = simpleHttp request

-- |The url for the json
request :: String
request = "https://api.forecast.io/forecast/" ++ apiKey ++ path
  where path = "/" ++ fst location ++ "," ++ snd location

apiKey :: String
apiKey = "abb2504f8579fc04baf9708889b4c795"

location :: (String, String)
location = ("38.933771", "-104.850764")
