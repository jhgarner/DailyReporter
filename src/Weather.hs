{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeApplications #-}

module Weather
  ( weather,
  )
where

import Config
import Control.Lens
import Data.Aeson
import Data.Aeson.Lens
import Data.HashMap.Strict
import Data.Maybe
import Data.Text
import Data.Text.IO
import Data.Time.Clock.POSIX
import Data.Time.Format
import Data.Time.LocalTime
import Parser
import Text.Read (readMaybe)
import Utils
import Prelude hiding (readFile)

-- | The final html text generated by weather.
weather :: Config -> IO Text
weather config = do
  w <- response config
  parser <- readFile "parsers/weather.json"
  h <- htmlS
  return . fromMaybe "Error getting weather" $ do
    -- TODO use lenses here
    params1 <- extractJson parser w
    let params2 = update (Just . getTime) "*tht" params1
    let params = update (Just . getTime) "*tlt" params2
    Just $ template (toList params) h

-- | Templating (uses simple *) for weather email section.
--  (templates/Weather.html)
htmlS :: IO Text
htmlS = readFile "templates/Weather.html"

-- | Grabs the json from the url for darksky api. Uses weather configuration.
response :: Config -> IO Text
response = getHttp . unpack . url

-- | Creates url for json request from darksky. Uses weather configuration.
url :: Config -> Text
url Config {..} =
  let location = "/" <> long <> "," <> lat
   in "https://api.darksky.net/forecast/" <> weatherApikey <> location

-- | Hardcoded TimeZone
currentZone :: TimeZone
currentZone = hoursToTimeZone (-6)

-- | Used to get time from darksky api. Solely for this.
--  TODO make this a little less gross to look at
getTime :: Text -> Text
getTime t =
  maybe
    t
    ( pack
        . formatTime defaultTimeLocale "%H:%M"
        . utcToZonedTime currentZone
        . posixSecondsToUTCTime
        . realToFrac
    )
    $ readMaybe @Double $ unpack t
