{-# LANGUAGE OverloadedStrings #-}

module Weather
  ( weather
  ) where

import Control.Lens
import Data.Aeson
import Data.Aeson.Lens
import Data.Maybe
import Data.Text
import Data.Time.Clock.POSIX
import Data.Time.Format
import Utils
import Debug.Trace

-- |The final html text generated by weather
weather :: IO Text
weather = do
  weather <- response
  return . fromMaybe "Error getting weather" $ do
    currently <- getKey weather ["currently", "summary"]
    currentTemp <- getKey weather ["currently", "apparentTemperature"]
    summary <- getKey weather ["daily", "summary"]
    dayData <- weather ^? key "daily" . key "data" . nth 0
    tempHigh <- getKey dayData ["temperatureHigh"]
    let tht = getTime $ getKey dayData ["temperatureHighTime"]
    tempLow <- getKey dayData ["temperatureLow"]
    let tlt = getTime $ getKey dayData ["temperatureLowTime"]
    precipProb <- getKey dayData ["precipProbability"]
    precipInt <- getKey dayData ["precipIntensity"]
    precipIntMax <- getKey dayData ["precipIntensityMax"]
    let pimt = getTime $ getKey dayData ["precipIntensityMaxTime"]
    nowSummary <- getKey dayData ["summary"]
    Just . template htmlS $
        [ ("*summary", summary)
        , ("*tempHigh", tempHigh)
        , ("*tht", tht)
        , ("*tempLow", tempLow)
        , ("*tlt", tlt)
        , ("*precipInt", precipInt)
        , ("*precipIntMax", precipIntMax)
        , ("*pimt", pimt)
        , ("*precipProb", precipProb)
        , ("*currently", currently)
        , ("*currentTemp", currentTemp)
        , ("*nowSummary", nowSummary)
        ]


htmlS =
  pack $
  "<meta charset=\"utf-8\"/><div align = \"center\">\n<h3>Weather Report:</h3>Summary: <b>*summary</b> <br>Max Apparent Temperature: <b>*tempHigh</b> at *tht<br>Min Apparent Temperature: <b>*tempLow</b> at *tlt<br>Precipitation Intensity: <b>*precipInt</b> inches per hour. <br>Max Intensity: <b>*precipIntMax</b> at *pimt<br>Probability of Precipitation: <b>*precipProb</b> <br>Currently: <b>*currently</b> <br>Current Temperature: <b>*currentTemp</b><br><br>Rest of the week: *nowSummary</div>"

-- |Grabs the json from the url
response :: IO Text
response = getHttp request

-- |The url for the json
request :: String
request = "https://api.forecast.io/forecast/" ++ apiKey ++ path
  where
    path = "/" ++ fst location ++ "," ++ snd location

apiKey :: String
apiKey = "abb2504f8579fc04baf9708889b4c795"

location :: (String, String)
location = ("38.933771", "-104.850764")

getKey :: (AsValue j) => j -> [Text] -> Maybe Text
getKey json (p:ps) = case json ^? Prelude.foldl (\acc a -> acc . key a) (key p) ps of
  Nothing -> Nothing
  Just (String s) -> Just s
  Just (Number n) -> Just $ pack . show $ n

getTime :: Maybe Text -> Text
getTime = maybe "None" (pack . formatTime defaultTimeLocale "%H:%M" . posixSecondsToUTCTime . realToFrac . (read :: String -> Double) . unpack)

