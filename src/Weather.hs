{-# LANGUAGE OverloadedStrings #-}

module Weather
  ( weatherHTML
  ) where

import Control.Lens
import Control.Monad
import Data.Aeson
import Data.Aeson.Lens
import qualified Data.ByteString.Lazy as B
import Data.Map
import Data.Maybe
import Data.Text
import Data.Time.Clock.POSIX
import Data.Time.Format
import Debug.Trace
import Network.HTTP.Conduit (simpleHttp)
import Utils

-- |The final html text generated by weather
weatherHTML :: IO Text
weatherHTML = do
  weather <- response
  return . fromMaybe "Error getting weather" $ do
    currently <- pack . show <$> weather ^? key "currently" . key "summary"
    currentTemp <-
      pack . show <$> weather ^? key "currently" . key "apparentTemperature"
    String summary <- weather ^? key "daily" . key "summary"
    dayData <- weather ^? key "daily" . key "data" . nth 0
    tempHigh <- pack . show <$> dayData ^? key "temperatureHigh"
    Number tempHighTime <- dayData ^? key "temperatureHighTime"
    tempLow <- pack . show <$> dayData ^? key "temperatureLow"
    Number tempLowTime <- dayData ^? key "temperatureLowTime"
    precipProb <- pack . show <$> dayData ^? key "precipProbability"
    precipInt <- pack . show <$> dayData ^? key "precipIntensity"
    precipIntMax <- pack . show <$> dayData ^? key "precipIntensityMax"
    let pimt = do
          Number precipIntMaxTime <- dayData ^? key "precipIntensityMaxTime"
          return . pack . formatTime defaultTimeLocale "%H:%M" $
            posixSecondsToUTCTime (realToFrac precipIntMaxTime)
    nowSummary <- pack . show <$> dayData ^? key "summary"
    let tht =
          pack . formatTime defaultTimeLocale "%H:%M" $
          posixSecondsToUTCTime (realToFrac tempHighTime)
    let tlt =
          pack . formatTime defaultTimeLocale "%H:%M" $
          posixSecondsToUTCTime (realToFrac tempLowTime)
    Just . replace "Number " "" . template htmlS $
      fromList
        [ ("*summary", summary)
        , ("*tempHigh", tempHigh)
        , ("*tht", tht)
        , ("*tempLow", tempLow)
        , ("*tlt", tlt)
        , ("*precipInt", precipInt)
        , ("*precipIntMax", precipIntMax)
        , ("*pimt", fromMaybe "None" pimt)
        , ("*precipProb", precipProb)
        , ("*currently", currently)
        , ("*currentTemp", currentTemp)
        , ("*nowSummary", nowSummary)
        ]

htmlS =
  pack $
  "<meta charset=\"utf-8\"/><div align = \"center\">\n<h3>Weather Report:</h3>Summary: <b>*summary</b> <br>Max Apparent Temperature: <b>*tempHigh</b> at *tht<br>Min Apparent Temperature: <b>*tempLow</b> at *tlt<br>Precipitation Intensity: <b>*precipInt</b> inches per hour. <br>Max Intensity: <b>*precipIntMax</b> at *pimt<br>Probability of Precipitation: <b>*precipProb</b> <br>Currently: <b>*currently</b> <br>Current Temperature: <b>*currentTemp</b><br><br>Rest of the week: *nowSummary</div>"

-- |Grabs the json from the url
response :: IO B.ByteString
response = simpleHttp request

-- |The url for the json
request :: String
request = "https://api.forecast.io/forecast/" ++ apiKey ++ path
  where
    path = "/" ++ fst location ++ "," ++ snd location

apiKey :: String
apiKey = "abb2504f8579fc04baf9708889b4c795"

location :: (String, String)
location = ("38.933771", "-104.850764")
